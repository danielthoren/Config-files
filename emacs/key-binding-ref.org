#+OPTIONS: ^:{}

* Keys explained
  [a-b]    : Press a and b to trigger
  [a b]    : Press a then b to trigger
  [a-b c]  : Press a and b, then c to trigger
  [a-b c-d]: Press a and b, then c and d to trigger

** Key map
  A key map is a prefix command to enter a mode, after which commands
  can be entered. For example, the key map for rectangle mode is:

  Rectangle mode key map: [C-x r]

  After pressing this key map, a command can be entered, for example
  the command to cut the currently marked rectangle:

  Cut the currently marked rectangle: [k]

  In this case, the whole sequence would be: [C-x r k]

** Special keys
   C  : Control
   M  : Meta (usually alt)
   S  : Shift
   RET: Enter key


* General stuff

  Abort current command              : [C-g]
  Open command prompt                : [M-x]
  Close emacs                        : [C-x C-c]
  Minimize emacs                     : [C-z]
  Open new connected emacs instance: : [C-x 5 2]

** Text operations
   Copy/paste:
     * Copy selection                   : [M-w]
     * Cut selection                    : [C-w]
     * Paste to point                   : [C-y]

   Search:
     * Search and replace               : [M-%] or [M-S-5]
     * Search forward in file           : [C-s]
     * Search backward in file          : [C-r]

   Save                             : [C-x C-s]
   Undo                             : [C-x u] [C-_]
   Set mark point                   : [C-Space] (Everything between point and cursor will be highlighted)
   Mark whole buffer                : [C-x h]

   Make word at point lowr case     : [M-l]
   Make word at point upper case    : [M-u]

** Basic movement

   Vertical Movement:
     * Move one char up                         : [C-p] (p =previous)
     * Move one char down                       : [C-n] (n = next)
     * Move 5 rows down                         : [M-n] (*not default*)
     * Move 5 rows up                           : [M-p] (*not default*)
     * Move page up                             : [M-v]
     * Move page down                           : [C-v]

     *Less useful*
     * Move forward over parenthetical group    : [C-M-n]
     * Move backward over a parenthetical group : [C-M-p]
     * Move up in parenthesis structure         : [C-M-u] (u = up)
     * Move down in parenthesis structure       : [C-M-d] (d = down)
     * Forward-sentence                         : [M-e] (Move down by sentence)
     * Backward-sentence                        : [M-a] (Move up by sentence)

   Horizontal movement:
     * Move one char left       : [C-b] (b = back)
     * Move one char right      : [C-f] (f = forward)
     * Move one word left       : [M-b] (b = back)
     * Move one word right      : [M-f] (f = forward)

     * Move to end of line      : [C-e] (e = end)
     * Move to beginning of line: [C-a]

   Go to line number        : [M-g M-g]

** Buffer manipulation
  Open new file                   : [C-x C-f] (f = file)
  Save current buffer             : [C-x C-s] (s = save)
  Close current buffer            : [C-x C-k] (k = kill)
  Split window vertical           : [C-x 2]
  Split window horizontal         : [C-x 3]
  Close current window            : [C-x 0]
  Close all but the current window: [C-x 1]
  Move to next window             : [C-x o]

  *Non default:*
  Move cursor to window o right              : [C-.]
  Move cursor to window on left              : [C-,]
  Cycle buffer to the right in current window: [C-M-.]
  Cycle buffer to the left in current window : [C-M-,]
  Move horizontal border between buffers     : [C-Left] [C-Right]
  Move vertical border between buffers       : [C-Up] [C-Down]


* KBD macro
  A macro can be used to repeat a action multiple times.
  Start recording a macro with the binding below, then enter
  a key sequence (can be anything). Once done,
  end the macro recording. The macro can now be repeated.

  To start recording a macro, press: [C-x (]
  To stop recording a macro, press : [C-x )]
  Use macro                        : [C-x e]

  *lasts for the duration of the session*
  Give most recent macro a name              : [C-x C-k n]
  Bind the most recent macro to key sequence : [C-x C-k b] (b = bind)

  Save named macro to current file (lisp code) : [M-x insert-kbd-macro RET (macro name) RET]
  load macro from file                         : [M-x load-file RET (file name) RET]


* Rectangle mode
  Allows the user to remove, copy, cut and paste rectangles of text

  Toggle rectangle mark mode                                                                     : [C-x SPC]

  Rectangle mode key map: [C-x r]

  Key map commands:
  - Kill text of region-rectangle and save it to copy buffer                                       : [k]
  - Save the test of region-rectangle to copy buffer                                               : [M-w]
  - Delete the text of region-rectangle                                                            : [d]
  - Paste the most recently saved region-rectangle at point                                        : [y]
  - Insert blank spaces to fill region-rectangle, the previous contents are pushed to the right    : [o]
  - Clear the region-rectangle by replacing its contents with spaces                               : [c]


* Registers
  Registeras are a way of mapping text, rectangles or positions to
  specifik keys. The mappings will stay persistant throughout the
  session.

  Hence forth, a key on the keyboard mapping to a register will be
  refered to as "(key)"

  View content of a register: [M-x view-register RET (key)]

** Position/state operations
  Record position of point to register         : [C-x r SPC (key)]

  Save the state of all frames to register     : [C-x r f (key)] (f = frames) (saves window configuration)
  Save the state of the selected buffer        : [C-x r w (key)] (w = window)

  Jump to position/configuration in register   : [C-x r j (key)]   (j = jump)

** Text operations
  Copy region into register            : [C-x r s (key)] (s = store)
  Copy rectangle into register         : [C-x r (key)] (r = rectangle)

  Save number to register              : [C-u (num) C-x r n (key)]
  Save number 0 to register            : [C-x r n (key)]
  Increment number by (num)            : [C-u (num) C-x r + (key)]
  Increment number by 1                : [C-x r + (key)]

  Insert text/rectangle from register  : [C-x r i (key)] (i = insert)

** Macros
   Store the most recent macro in register : [C-x C-k x (key)
   Execute macro stored in register        : [C-x r j (key)]


* Bookmarks
  Bookmarks has a lot in common with registers, the main difference
  being that they are persistant from one session to another. Emacs
  saves bookmarks when it is shut down automatically.

  A bookmark is a mapping between a position in a buffer and a
  keyword, hence forth reffered to as (name)

  Set bookmark for the visited file at point          : [C-x r m RET]
  Set named bookmark at point                         : [C-x r m (name)]
  Jump to bookmark                                    : [C-x r b (name)]
  List all bookmarks                                  : [C-x r l]        (l = list)
  Save all current bookmarks in default bookmark file : [M-x bookmark-save]

* Dired (file tree in emacs)

  All operations in dired are applied to the file the marker stands on

  Refresh contents        : [g]
  Rename or move          : [R]
  Copy file               : [C]
  Delete marked file      : [D]

  Open sub directory in buffer      : [i]

**  Rename multiple files inline
   -Enter dired edit mode   : [C-x C-f <Return>] (Open new file command, then enter)

  - Enter editing mode      : [C-x C-q]
  - Apply changes           : [C-c C-c]


**  Delete multiple files
  - Put deletion marker    : [d]
  - Remove deletion marker : [u]
  - Apply deletion         : [x]


** Move/copy multiple files to buffer
  - Put marker             : [m]
  - Copy to buffer         : [W]
  - Move to buffer         : [X]
  - Paste to current dir   : [Y]


* lsp mode
  Go to declaration       : [M-i]
  Go back                 : [C-M-i]

  Rename variable/function: [C-c r]


* Neotree
  Open/close neotree: [C-x t]


* Magit (git in emacs)
  Open magit: [C-x g]

  When in mode:
  * Help    : [?]


* Multi line cursor
  Add cursor to all marked lines                    : [C-S-c C-S-c]
  Add cursor to line below with same text as marked : [C-S-<]         (Put cursor on next place where the text matches the marked text)
  Add cursor to line above with same text as marked : [C-S->]         (Put cursor on previous place where the text matches the marked text)
  Add cursor at mouse                               : [C-S-"mouse-1"] (Control + Shift + Mouse-1: put cursor at mouse point)


* Normal Comments
  Works in c/c++ and python mode

  Insert comment                        : [C-M-j]
  Add new line to comment               : [M-j]

  Insert self centering block comment   : [C-M-k]
  Add new self centering line           : [M-j]


* Doxygen comment generation (generates doc comments)
  Works in c/c++ mode

  Auto generate doxygen function header: [C-c d t]
  Auto generate doxygen file header    : [C-c d h]


* Auto indent mode (dtrt)

  When opening a file, dtrt will automatically detect the indentation
  strategy of the file and adjust.

  When opening a new file, the default indentation might be off. In
  order to set the indentation strategy manually, write some code
  ,one line is enough, then do the following to re-evaluate current
  indentation:

  1. Open command prompt                                      : [M-x]
  2. Enter the following command (company will auto-complete) : dtrt-indent-adapt

  The indentation strategy should now be adjusted


* Org mode
  Org mode is a good way to take notes.
  Make a file on the format *.org and enter it using emacs.

** Headings
   To create a heading, start at the leftmost column,
   then add a number of stars. For each star, a new heading level is used.
   for example:
   * Top level heading
   ** Next level
   *** Next level

   When point is on a header, use Tab to expand/collapse the heading

** Lists
   A list is started by entering one of the possible bullets. Some examples are:
   - *
   - +
   - 1.
   - 1)
   - -

   The following bindings can be used when point is at a list item:
   + Create the next bullet                                       : [M-Ret]
   + Toggle the whole list between the different types of bullets : [C-c -]

** Todo list

   Todo bullets work like a regular list, but can be set to done. It looks like:

   - [X] This task is done
   - [ ] This task is not done

   The following bindings work when on a todo bullet:
   + Make next todo item    : [M-S-Ret]
   + Mark todo item as done : [C-c C-c]

** Good settings

   Start with all headings expanded:
   - #+STARTUP: showeverything

   Disable default underscore behaviour:
   - #+OPTIONS: ^:{}
